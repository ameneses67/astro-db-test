<category-form>
	<form id="cat-form" action="/admin/categorias" method="post">
		<div class="flex flex-col items-start gap-4 md:flex-row">
			<div id="name-div" class="w-full max-w-xs space-y-2">
				<input
					name="name"
					type="text"
					placeholder="Categoría"
					class="input input-bordered w-full"
				/>
			</div>
			<div id="description-div" class="w-full max-w-xs space-y-2">
				<textarea
					name="description"
					class="textarea textarea-bordered w-full"
					placeholder="Descripción"
					rows="1"></textarea>
			</div>
			<div id="image-div" class="w-full max-w-xs space-y-2">
				<input name="imagePath" type="file" class="file-input file-input-bordered w-full" />
			</div>
		</div>
		<button type="submit" class="btn btn-accent mt-4 px-6">Crear</button>
	</form>
</category-form>

<script>
	import { categorySchema } from "src/schemas/categoryForm";
	import { z } from "zod";

	if (location.search) {
		const params = new URLSearchParams(location.search);
		const catIdValue = params.get("id");
		const catNameValue = params.get("name");
		const catDescValue = params.get("description");

		console.log("catIdValue: ", catIdValue);
		console.log("catNameValue: ", catNameValue);
		console.log("catDescValue: ", catDescValue);
	}

	class CategoryForm extends HTMLElement {
		constructor() {
			super();

			// Selectors
			const form = this.querySelector("form") as HTMLFormElement;
			const nameError = this.querySelector("#name-div");
			const descError = this.querySelector("#description-div");
			const imgError = this.querySelector("#image-div");

			form.addEventListener("submit", (e) => handleSubmit(e));

			const handleSubmit = async (e: SubmitEvent) => {
				e.preventDefault();

				// Reset error display
				const errP = this.querySelectorAll(".errorP");

				if (errP.length > 0) {
					errP.forEach((el) => el.remove());
				}

				// Form data
				const formData = new FormData(form);
				const formValues = Object.fromEntries(formData) as z.infer<typeof categorySchema>;

				// Category already exists?
				if (formValues.name !== "") {
					const response = await fetch(
						`/api/categorias?name=${formValues.name.toLowerCase().trim()}`
					);

					if (response.ok) {
						displayError("name", "Esta categoria ya exite");
						return;
					}
				}

				formValues.imagePath = (formData.get("imagePath") as { name: string }).name;

				// Form data validation
				const formVal = categorySchema.safeParse(formValues);

				if (!formVal.success) {
					formVal.error.issues.map((err) => displayError(err.path[0] as string, err.message));
				} else {
					const response = await fetch(`/api/categorias`, {
						method: "POST",
						body: JSON.stringify(formVal.data),
						headers: {
							"Content-Type": "application/json; charset=UTF-8",
						},
					});

					if (!response.ok) {
						throw new Error("No se puedo crear la categoría. Intenta de nuevo por favor.");
					}

					const data = await response.json();

					new Response(JSON.stringify(data), {
						status: 200,
					});

					form.reset();

					location.href = "/admin/categorias";
				}

				// Errors display
				function displayError(field: string, msg: string) {
					const errorP = document.createElement("p");

					errorP.classList.add("errorP", "flex", "items-center", "gap-2", "text-sm", "text-error");

					errorP.textContent = msg;

					field === "name" && nameError?.appendChild(errorP);
					field === "description" && descError?.appendChild(errorP);
					field === "imagePath" && imgError?.appendChild(errorP);
				}
			};
		}
	}

	customElements.define("category-form", CategoryForm);
</script>
