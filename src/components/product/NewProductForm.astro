---
// Astro db
import { string } from "astro/zod";
import { Product } from "astro:db";
import { db, Category, Subcategory, Brand, Size, Color } from "astro:db";

// Data
const categories = await db.select().from(Category);

const subcategories = await db.select().from(Subcategory);

const brands = await db.select().from(Brand);

const sizes = await db.select().from(Size);

const colors = await db.select().from(Color);

// Create new product
if (Astro.request.method === "POST") {
	// Parse form data
	const formData = await Astro.request.formData();
	const name = formData.get("name") as string;
	const description = formData.get("description") as string;
	const brand = formData.get("brand") as unknown as number;
	const category = formData.get("category") as unknown as number;
	const subcategory = formData.get("subcategory") as unknown as number;
	const price = formData.get("price") as unknown as number;
	const size = formData.get("size") as unknown as number;
	const color = formData.get("color") as unknown as number;
	const image = formData.get("image") as string;
	// Form data validation
	if (
		typeof name === "string" &&
		typeof description === "string" &&
		typeof brand === "number" &&
		typeof category === "number" &&
		typeof subcategory === "number" &&
		typeof price === "number" &&
		typeof size === "number" &&
		typeof color === "number" &&
		typeof image === "string"
	) {
		// Insert form data into the product table
		await db.insert(Product).values({
			name,
			description,
			brand,
			category,
			subcategory,
			price,
			size,
			color,
			image,
		});
	}
}
---

<form
	method="POST"
	class="flex flex-col gap-4"
>
	<input
		name="name"
		type="text"
		placeholder="Producto"
		class="input input-bordered w-full max-w-xs"
	/>
	<textarea
		name="description"
		class="textarea textarea-bordered max-w-xs"
		placeholder="Descripción"
	></textarea>
	<select
		name="brand"
		class="select select-bordered w-full max-w-xs"
	>
		<option
			disabled
			selected
			>Selecciona una marca</option
		>
		{brands.map((brand) => <option value={brand.id}>{brand.name}</option>)}
	</select>
	<select
		name="category"
		class="select select-bordered w-full max-w-xs"
	>
		<option
			disabled
			selected
			>Selecciona una categoría</option
		>
		{
			categories.map((category) => (
				<option value={category.id}>{category.name}</option>
			))
		}
	</select>
	<select
		name="subcategory"
		class="select select-bordered w-full max-w-xs"
	>
		<option
			disabled
			selected
			>Selecciona una subcategoría</option
		>
		{
			subcategories.map((subcategory) => (
				<option value={subcategory.id}>{subcategory.name}</option>
			))
		}
	</select>
	<input
		name="price"
		type="number"
		placeholder="Precio"
		class="input input-bordered w-full max-w-xs"
	/>
	<select
		name="size"
		class="select select-bordered w-full max-w-xs"
	>
		<option
			disabled
			selected
			>Selecciona un tamaño</option
		>
		{sizes.map((size) => <option value={size.id}>{size.description}</option>)}
	</select>
	<select
		name="color"
		class="select select-bordered w-full max-w-xs"
	>
		<option
			disabled
			selected
			>Selecciona un color</option
		>
		{
			colors.map((color) => (
				<option value={color.id}>{color.description}</option>
			))
		}
	</select>
	<input
		name="image"
		type="text"
		placeholder="URL imagen"
		class="input input-bordered w-full max-w-xs"
	/>
	<button
		type="submit"
		class="btn btn-primary w-full max-w-xs"
		>Crear producto</button
	>
</form>
