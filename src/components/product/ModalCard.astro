---
// Astro tools
import { Image } from "astro:assets";

// Types
import type { ImageMetadata } from "astro";

// Components
import Modal from "@ui/Modal.astro";

interface Props {
	name: string;
	description: string;
	brand: string | undefined;
	price: number;
	size: string | undefined;
	imagePath: string;
}

const { name, description, size, price, imagePath, brand } = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/*.{jpeg,jpg,png,gif}"
);
if (!images[`/src/assets/${imagePath}`])
	throw new Error(
		`"${imagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`
	);
---

<modal-card>
	<article
		id="product-card"
		class="card overflow-hidden cursor-pointer"
	>
		<Image
			src={images[`/src/assets/${imagePath}`]()}
			alt={name}
			width={320}
			height={400}
			format="avif"
			class="aspect-[3/4] object-cover"
		/>
		<div class="card-body justify-between h-1/4 p-2">
			<p class="line-clamp-2">
				<span class="font-semibold text-lg capitalize">{name}</span> - {
					description
				}
			</p>
			<div class="flex items-center">
				<p class="text-accent font-semibold uppercase">{brand}</p>
				{
					size && (
						<p class="text-primary text-right font-bold uppercase">{size}</p>
					)
				}
			</div>
			<p class="font-extrabold text-lg">
				${new Intl.NumberFormat().format(price)}
			</p>
		</div>
	</article>
	<Modal
		{name}
		{description}
		{size}
		{price}
		{imagePath}
		{brand}
	/>
</modal-card>

<script>
	class ModalCard extends HTMLElement {
		constructor() {
			super();

			const card = this.querySelector("article");
			card?.addEventListener("click", () => {
				const productModal = this.querySelector("dialog");
				productModal?.showModal();
			});
		}
	}

	customElements.define("modal-card", ModalCard);
</script>
