---
// Astro tools
import { Image } from "astro:assets";

// Components
import Modal from "@ui/Modal.astro";

// Types
import type { ImageMetadata } from "astro";
import type { BrandType, ProductType, SizeType } from "src/env";

interface Props {
	product: {
		Product: ProductType;
		Brand: BrandType | null;
		Size: SizeType | null;
	};
}

const { product } = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/*.{jpeg,jpg,png,gif,webp,avif}"
);
if (!images[`/src/assets/${product.Product.image}`])
	throw new Error(
		`"${product.Product.image}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif,webp,avif}"`
	);
---

<modal-card>
	<article
		id="product-card"
		class="card cursor-pointer overflow-hidden"
	>
		<Image
			src={images[`/src/assets/${product.Product.image}`]()}
			alt={product.Product.name}
			width={320}
			height={400}
			format="avif"
			class="aspect-[3/4] object-cover"
		/>
		<div class="card-body h-1/4 justify-between p-2">
			<p class="line-clamp-2">
				<span class="text-lg font-semibold capitalize">{product.Product.name}</span> - {
					product.Product.description
				}
			</p>
			<div class="flex items-center">
				<p class="font-semibold uppercase text-accent">{product.Brand?.name}</p>
				{
					product.Size?.code && (
						<p class="text-right font-bold uppercase text-primary">{product.Size?.code}</p>
					)
				}
			</div>
			<p class="text-lg font-extrabold">
				${new Intl.NumberFormat().format(product.Product.price)}
			</p>
		</div>
	</article>
	<Modal {product} />
</modal-card>

<script>
	class ModalCard extends HTMLElement {
		constructor() {
			super();

			const card = this.querySelector("article");
			card?.addEventListener("click", () => {
				const productModal = this.querySelector("dialog");
				productModal?.showModal();
			});
		}
	}

	customElements.define("modal-card", ModalCard);
</script>
