---
// Astro db
// import { db, Category } from "astro:db";
import { GET } from "../api/categorias/index.json";

// Astro tools
import { Icon } from "astro-icon/components";

// Layouts
import BaseLayout from "@layouts/BaseLayout.astro";

// Components
import Heading from "@components/ui/Heading.astro";
import Section from "@ui/Section.astro";
import Button from "@ui/Button.astro";
import { getFormattedDate } from "@libs/utils";

// Data
// const categories = await db.select().from(Category);
type CategoryType = {
	id: string;
	name: string;
	description: string;
	imagePath: string;
	published: Date;
};

const response = await GET(Astro);
const categories: CategoryType[] = await response.json();

// Head metadata
const title = "Categorías";
const description = "Listado de categorías";
---

<BaseLayout
	{title}
	{description}
>
	<Section>
		<div class="flex justify-between items-center">
			<Heading
				tagName="h1"
				size="h1"
				title="Categorías"
			>
				Administra las categorías de tu tienda
			</Heading>
			<Button
				href="/admin/nueva-categoria"
				color="accent"
				style="outline"
			>
				<Icon
					name="lucide:circle-plus"
					size={20}
				/>
				Crear nueva
			</Button>
		</div>
		<div class="overflow-x-auto">
			<table class="table table-zebra">
				<!-- head -->
				<thead>
					<tr>
						<th>Categoría / Id</th>
						<th>Descripción</th>
						<th>Imagen</th>
						<th>Fecha</th>
						<th>Acciones</th>
					</tr>
				</thead>
				<tbody>
					<!-- row 1 -->
					{
						categories.map((category) => (
							<tr>
								<th>
									<p>{category.name}</p>
									<p class="font-light">{category.id}</p>
								</th>
								<td>{category.description}</td>
								<td>{category.imagePath}</td>
								<td>{getFormattedDate(category.published)}</td>
								<td class="relative max-w-fit">
									<Button
										color="primary"
										style="ghost"
										classes="actions-btn"
									>
										<Icon name="lucide:ellipsis-vertical" />
									</Button>
									<ul class="menu bg-base-300 rounded-box max-w-fit absolute right-4 top-full z-10 hidden">
										<li>
											<a
												class="cat-edit"
												data-id={category.id}
											>
												<Icon
													name="lucide:edit"
													class="h-5 w-5"
												/>
												Editar
											</a>
										</li>
										<li>
											<a
												class="cat-del"
												data-id={category.id}
											>
												<Icon
													name="lucide:trash-2"
													class="h-5 w-5"
												/>
												Borrar
											</a>
										</li>
									</ul>
								</td>
							</tr>
						))
					}
				</tbody>
			</table>
		</div>
	</Section>
</BaseLayout>

<script>
	// import { db, eq, Category } from "astro:db";

	// Selectors
	const actionsBtn = document.querySelectorAll(
		".actions-btn"
	) as NodeListOf<HTMLAnchorElement>;

	const catDelBtn = document.querySelectorAll(
		".cat-del"
	) as NodeListOf<HTMLAnchorElement>;

	// Show actions menu
	actionsBtn.forEach((btn) =>
		btn.addEventListener("click", () => toggleActionsMenu(btn))
	);

	// Delete functionality
	catDelBtn.forEach((btn) =>
		btn.addEventListener("click", () => categoryDelete(btn))
	);

	// Functions
	function toggleActionsMenu(btn: HTMLAnchorElement) {
		btn.nextElementSibling?.classList.toggle("hidden");
	}

	async function categoryDelete(btn: HTMLAnchorElement) {
		// await db.delete(Category).where(eq(Category.id, btn.dataset.id as string));
		btn.parentElement?.parentElement?.classList.toggle("hidden");

		return await fetch(`/api/categorias/${btn.dataset.id}.json`, {
			method: "DELETE",
			headers: {
				"Content-Type": "application/json",
			},
		});
	}
</script>
